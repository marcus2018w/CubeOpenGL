import java.awt.Canvas;
import java.awt.Dimension;
import java.awt.DisplayMode;

import javax.swing.JFrame;

import com.jogamp.newt.Display;
import com.jogamp.newt.opengl.GLWindow;
import com.jogamp.opengl.GL;
import com.jogamp.opengl.GL2;
import com.jogamp.opengl.GLAutoDrawable;
import com.jogamp.opengl.GLCapabilities;
import com.jogamp.opengl.GLEventListener;
import com.jogamp.opengl.GLProfile;
import com.jogamp.opengl.awt.GLJPanel;
import com.jogamp.opengl.glu.GLU;
import com.jogamp.opengl.util.gl2.GLUT;

import java.util.Scanner;
import java.awt.Toolkit;
public class Triangle extends GLJPanel implements GLEventListener{

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		JFrame window = new JFrame("Viewing Scene");
		Canvas canvas = new Canvas();
		GLCapabilities caps = new GLCapabilities(null);
		Triangle panel = new Triangle(caps);
		window.add(canvas);
		window.setUndecorated(true);
		window.setAlwaysOnTop(true);
		window.setResizable(true);
		window.setVisible(true);
		window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		window.setContentPane(panel);
		window.pack();
	}
	public Triangle(GLCapabilities capabilities) {

		super(capabilities);
		//makes the opengl display fullscreen
		Toolkit tk = Toolkit.getDefaultToolkit();
		int x = (int )tk.getScreenSize().getWidth();
		int y = (int ) tk.getScreenSize().getHeight(); 
		setPreferredSize(new Dimension(x, y));
		addGLEventListener(this);
	}
	private void triangle(GL2 gl, float r, float g, float b){
		gl.glBegin(GL2.GL_TRIANGLES);   
		gl.glColor3f(r,b,g);
		gl.glVertex3f(0, 0, 0);
		gl.glVertex3f(.1f,0,0);
		gl.glVertex3f(0,.1f,0);
		gl.glEnd();
	}
	private void triangle(GL2 gl){
		gl.glPushMatrix();
		triangle(gl,1.0f,0.0f,0.0f);
		//make a red triangle
		gl.glPopMatrix();
		
	}
	@Override
	public void display(GLAutoDrawable drawable) {
		// TODO Auto-generated method stub
		GL2 gl = drawable.getGL().getGL2();
		GLU glu = GLU.createGLU(gl);
		gl.glClearColor(0, 0, 0, 0);
		gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT);
		gl.glMatrixMode(GL2.GL_PROJECTION); // Set up the projection.
		gl.glLoadIdentity();
		gl.glOrtho(-1, 1, -1, 1, -2, 2);
		gl.glMatrixMode(GL2.GL_MODELVIEW);
		gl.glLoadIdentity();
		glu.gluLookAt(0.15, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);
		triangle(gl);
	}

	@Override
	public void dispose(GLAutoDrawable drawable) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void init(GLAutoDrawable drawable) {
		// TODO Auto-generated method stub
		GL2 gl = drawable.getGL().getGL2();
		gl.glClearColor(0.8F, 0.8F, 0.8F, 1.0F);
		gl.glEnable(GL.GL_DEPTH_TEST);
		gl.glEnable(GL2.GL_LIGHTING);
		gl.glEnable(GL2.GL_LIGHT0);
		gl.glEnable(GL2.GL_COLOR_MATERIAL);
	}

	@Override
	public void reshape(GLAutoDrawable drawable, int x, int y, int width,
			int height) {
		// TODO Auto-generated method stub
		// called when user resizes the window
				final GL2 gl = drawable.getGL().getGL2();
				GLU glu = GLU.createGLU(gl);

				if (height <= 0)
					height = 1;
				final float h = (float) width / (float) height;
				gl.glViewport(0, 0, width, height);
				gl.glMatrixMode(GL2.GL_PROJECTION);
				gl.glLoadIdentity();
				glu.gluPerspective(45.0f, h, 1.0, 20.0);
				gl.glMatrixMode(GL2.GL_MODELVIEW);
				gl.glLoadIdentity();
		
	}

}
